name: Create new version

on:
  workflow_dispatch:
    inputs:
      SEMVER_LEVEL:
        description: One of {BUILD, PATCH, MINOR, MAJOR}
        required: true
        default: BUILD
        type: string

  workflow_call:
    inputs:
      SEMVER_LEVEL:
        description: One of {BUILD, PATCH, MINOR, MAJOR}
        required: false
        default: BUILD
        type: string

    outputs:
      NEW_VERSION:
        description: The new version string
        value: ${{ jobs.createNewVersion.outputs.NEW_VERSION }}

    secrets:
      LARGE_SECRET_PASSPHRASE:
        description: Passphrase used to decrypt GPG key
        required: true
      DISCORD_WEBHOOK_URL:
        description: Webhook used to comment in Discord
        required: true
      KIROKU_ADMIN_COMMIT_TOKEN:
        description: KirokuAdmin personal access token, used to workaround committing to protected branch
        required: true

jobs:
  validateActor:
    runs-on: ubuntu-latest
    outputs:
      HAS_WRITE_ACCESS: ${{ contains(fromJSON('["write", "admin"]'), steps.getUserPermissions.outputs.PERMISSION) }}
    steps:
      - name: Get user permissions
        id: getUserPermissions
        run: echo "PERMISSION=$(gh api /repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission | jq -r '.permission')" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.KIROKU_ADMIN_COMMIT_TOKEN }}

  createNewVersion:
    runs-on: macos-latest
    needs: validateActor
    if: ${{ fromJSON(needs.validateActor.outputs.HAS_WRITE_ACCESS) }}

    outputs:
      NEW_VERSION: ${{ steps.bumpVersion.outputs.NEW_VERSION }}

    steps:
      - name: Run turnstyle
        uses: softprops/turnstyle@49108bdfa571e62371bd2c3094893c547ab3fc03
        with:
          poll-interval-seconds: 10
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Check out
        uses: actions/checkout@v4
        with:
          ref: master
          # The KIROKU_ADMIN_COMMIT_TOKEN is a personal access token tied to KirokuAdmin
          # This is a workaround to allow pushes to a protected branch
          token: ${{ secrets.KIROKU_ADMIN_COMMIT_TOKEN }}

      - name: Setup git for KirokuAdmin
        uses: ./.github/actions/composite/setupGitForKirokuAdmin
        id: setupGitForKirokuAdmin
        with:
          GPG_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Generate version
        id: bumpVersion
        uses: ./.github/actions/javascript/bumpVersion
        with:
          GITHUB_TOKEN: ${{ secrets.KIROKU_ADMIN_COMMIT_TOKEN }}
          SEMVER_LEVEL: ${{ inputs.SEMVER_LEVEL }}

      - name: Commit new version
        run: |
          git add \
            ./package.json \
            ./package-lock.json \
            ./android/app/build.gradle \
            ./ios/kiroku/Info.plist \
            ./ios/kirokuTests/Info.plist
          git commit -m "Update version to ${{ steps.bumpVersion.outputs.NEW_VERSION }}"

      - name: Push version bump branch
        id: pushVersionBranch
        env:
          VERSION: ${{ steps.bumpVersion.outputs.NEW_VERSION }}
        run: |
          set -eo pipefail

          SANITISED_VERSION="${VERSION//[^a-zA-Z0-9._-]/-}"
          BRANCH_NAME="automation/version-bump/${SANITISED_VERSION}-run-${GITHUB_RUN_ID}"

          git switch -c "$BRANCH_NAME"
          git push --set-upstream origin "$BRANCH_NAME"

          echo "BRANCH_NAME=$BRANCH_NAME" >> "$GITHUB_OUTPUT"

      - name: Create version bump pull request
        id: createVersionPr
        env:
          GH_TOKEN: ${{ secrets.KIROKU_ADMIN_COMMIT_TOKEN }}
          VERSION: ${{ steps.bumpVersion.outputs.NEW_VERSION }}
          BRANCH_NAME: ${{ steps.pushVersionBranch.outputs.BRANCH_NAME }}
        run: |
          set -eo pipefail

          PR_TITLE="Update version to ${VERSION}"
          PR_BODY=$(cat <<'EOF'
## Summary
- Automated version bump prepared by the deployment workflow.

## Testing
- Not applicable
EOF
)

          gh pr create \
            --base master \
            --head "$BRANCH_NAME" \
            --title "$PR_TITLE" \
            --body "$PR_BODY"

          PR_NUMBER=$(gh pr view "$BRANCH_NAME" --json number -q '.number')
          echo "PR_NUMBER=$PR_NUMBER" >> "$GITHUB_OUTPUT"

      - name: Merge version bump pull request
        env:
          GH_TOKEN: ${{ secrets.KIROKU_ADMIN_COMMIT_TOKEN }}
          PR_NUMBER: ${{ steps.createVersionPr.outputs.PR_NUMBER }}
          VERSION: ${{ steps.bumpVersion.outputs.NEW_VERSION }}
        run: |
          set -eo pipefail

          gh pr merge "$PR_NUMBER" \
            --admin \
            --squash \
            --delete-branch \
            --subject "Update version to ${VERSION}" \
            --body ""

  announceFailedWorkflow:
    runs-on: ubuntu-latest
    needs: createNewVersion
    if: ${{ failure() }}
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          ref: master

      - name: Announce failed workflow in Discord
        uses: ./.github/actions/composite/announceFailedWorkflowInDiscord
        with:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
