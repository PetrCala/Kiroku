name: Build and deploy apps for testing

on:
  workflow_dispatch:
    inputs:
      PULL_REQUEST_NUMBER:
        description: Pull Request number for correct placement of apps
        required: true
  pull_request:
    types: [opened, synchronize, labeled]
    branches: ['*ci-test/**']

permissions:
  id-token: write
  pull-requests: write
  contents: write

jobs:
  validateActor:
    runs-on: ubuntu-latest
    outputs:
      READY_TO_BUILD: ${{  fromJSON(steps.hasReadyToBuildLabel.outputs.HAS_READY_TO_BUILD_LABEL) }}
    steps:
      - id: hasReadyToBuildLabel
        name: Set HAS_READY_TO_BUILD_LABEL flag
        run: |
          echo "HAS_READY_TO_BUILD_LABEL=$(gh pr view "${{ env.PULL_REQUEST_NUMBER }}" --repo PetrCala/Kiroku --json labels --jq '.labels[].name' | grep -q 'Ready To Build' && echo 'true')" >> "$GITHUB_OUTPUT"
          if [[ "$HAS_READY_TO_BUILD_LABEL" != 'true' ]]; then
            echo "The 'Ready to Build' label is not attached to the PR #${{ env.PULL_REQUEST_NUMBER }}"
          fi
        env:
          PULL_REQUEST_NUMBER: ${{ github.event.number || github.event.inputs.PULL_REQUEST_NUMBER }}
          GITHUB_TOKEN: ${{ github.token }}

  getBranchRef:
    runs-on: ubuntu-latest
    needs: validateActor
    if: ${{ fromJSON(needs.validateActor.outputs.READY_TO_BUILD) }}
    outputs:
      REF: ${{steps.getHeadRef.outputs.REF}}
    steps:
      - name: Checkout
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/checkout@v4

      - name: Check if pull request number is correct
        if: ${{ github.event_name == 'workflow_dispatch' }}
        id: getHeadRef
        run: |
          set -e
          gh pr checkout ${{ github.event.inputs.PULL_REQUEST_NUMBER }}
          echo "REF=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  android:
    name: Build and deploy Android for testing
    runs-on:
      - self-hosted
      - android-large
    needs: [validateActor, getBranchRef]
    if: ${{ fromJSON(needs.validateActor.outputs.READY_TO_BUILD) }}
    env:
      PULL_REQUEST_NUMBER: ${{ github.event.number || github.event.inputs.PULL_REQUEST_NUMBER }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || needs.getBranchRef.outputs.REF }}

      - name: Create .env.adhoc file based on staging and add PULL_REQUEST_NUMBER env to it
        run: |
          echo "${{ secrets.ADHOC_ENV_FILE }}" > .env.adhoc
          echo "PULL_REQUEST_NUMBER=$PULL_REQUEST_NUMBER" >> .env.adhoc

      - name: Setup Node
        uses: ./.github/actions/composite/setupNode

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: '17'

      - name: Setup Ruby
        uses: ruby/setup-ruby@a05e47355e80e57b9a67566a813648fa67d92011
        with:
          ruby-version: '3.2.2'
          bundler-cache: true

      - name: Decrypt keystore
        run: cd android/app && gpg --quiet --batch --yes --decrypt --passphrase="$LARGE_SECRET_PASSPHRASE" --output kiroku-play-key.keystore kiroku-play-key.keystore.gpg
        env:
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Decrypt json key
        run: cd android/app && gpg --quiet --batch --yes --decrypt --passphrase="$LARGE_SECRET_PASSPHRASE" --output android-fastlane-json-key.json android-fastlane-json-key.json.gpg
        env:
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/KirokuS3Upload
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Run Fastlane beta test
        id: runFastlaneBetaTest
        run: bundle exec fastlane android build_internal
        env:
          S3_BUCKET: ${{ secrets.AWS_DEV_ARTIFACTS_BUCKET }}
          S3_REGION: ${{ secrets.AWS_REGION }}
          MYAPP_UPLOAD_STORE_PASSWORD: ${{ secrets.MYAPP_UPLOAD_STORE_PASSWORD }}
          MYAPP_UPLOAD_KEY_PASSWORD: ${{ secrets.MYAPP_UPLOAD_KEY_PASSWORD }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android
          path: ./android_paths.json

  iOS:
    name: Build and deploy iOS for testing
    needs: [validateActor, getBranchRef]
    if: ${{ fromJSON(needs.validateActor.outputs.READY_TO_BUILD) }}
    env:
      PULL_REQUEST_NUMBER: ${{ github.event.number || github.event.inputs.PULL_REQUEST_NUMBER }}
      DEVELOPER_DIR: /Applications/Xcode_15.2.0.app/Contents/Developer
    runs-on: macos-13
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || needs.getBranchRef.outputs.REF }}

      - name: Create .env.adhoc file based on staging and add PULL_REQUEST_NUMBER env to it
        run: |
          echo "${{ secrets.ADHOC_ENV_FILE }}" > .env.adhoc
          echo "PULL_REQUEST_NUMBER=$PULL_REQUEST_NUMBER" >> .env.adhoc

      - name: Setup Node
        uses: ./.github/actions/composite/setupNode

      - name: Setup XCode
        run: sudo xcode-select -switch /Applications/Xcode_15.2.0.app

      - name: Setup Ruby
        uses: ruby/setup-ruby@a05e47355e80e57b9a67566a813648fa67d92011
        with:
          ruby-version: '3.2.2'
          bundler-cache: true

      - name: Cache Pod dependencies
        uses: actions/cache@v4
        id: pods-cache
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-cache-${{ hashFiles('ios/Podfile.lock', 'firebase.json') }}
          restore-keys: ${{ runner.os }}-pods-cache-

      - name: Compare Podfile.lock and Manifest.lock
        id: compare-podfile-and-manifest
        run: echo "IS_PODFILE_SAME_AS_MANIFEST=${{ hashFiles('ios/Podfile.lock') == hashFiles('ios/Pods/Manifest.lock') }}" >> "$GITHUB_OUTPUT"

      - name: Install cocoapods
        uses: nick-invision/retry@0711ba3d7808574133d713a0d92d2941be03a350
        if: steps.pods-cache.outputs.cache-hit != 'true' || steps.compare-podfile-and-manifest.outputs.IS_PODFILE_SAME_AS_MANIFEST != 'true'
        with:
          timeout_minutes: 10
          max_attempts: 5
          command: cd ios && bundle exec pod install

      - name: Reset pods
        run: |
          npm run ios:pod:reset

      - name: Set up environment for Xcode
        run: |
          echo "export NODE_BINARY=$(which node)" >> "$HOME/.bash_profile"
          source "$HOME/.bash_profile"

      - name: Decrypt provisioning profile
        run: cd ios && gpg --quiet --batch --yes --decrypt --passphrase="$LARGE_SECRET_PASSPHRASE" --output Kiroku_AdHoc.mobileprovision Kiroku_AdHoc.mobileprovision.gpg
        env:
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Decrypt certificate
        run: cd ios && gpg --quiet --batch --yes --decrypt --passphrase="$LARGE_SECRET_PASSPHRASE" --output Certificates.p12 Certificates.p12.gpg
        env:
          LARGE_SECRET_PASSPHRASE: ${{ secrets.LARGE_SECRET_PASSPHRASE }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/KirokuS3Upload
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Bundle install
        run: npm run jsbundle

      - name: Run Fastlane
        run: bundle exec fastlane ios build_internal
        env:
          S3_BUCKET: ${{ secrets.AWS_DEV_ARTIFACTS_BUCKET }}
          S3_REGION: ${{ secrets.AWS_REGION }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios
          path: ./ios_paths.json

  postGithubComment:
    runs-on: ubuntu-latest
    name: Post a GitHub comment with app download links for testing
    needs: [validateActor, getBranchRef, android, iOS]
    if: ${{ always() }}
    env:
      PULL_REQUEST_NUMBER: ${{ github.event.number || github.event.inputs.PULL_REQUEST_NUMBER }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || needs.getBranchRef.outputs.REF }}

      - name: Download Artifact
        uses: actions/download-artifact@v4

      - name: Read JSONs with android paths
        id: get_android_path
        if: ${{ needs.android.result == 'success' }}
        run: |
          content_android="$(cat ./android/android_paths.json)"
          content_android="${content_android//'%'/'%25'}"
          content_android="${content_android//$'\n'/'%0A'}"
          content_android="${content_android//$'\r'/'%0D'}"
          android_path=$(echo "$content_android" | jq -r '.html_path')
          echo "android_path=$android_path" >> "$GITHUB_OUTPUT"

      - name: Read JSONs with iOS paths
        id: get_ios_path
        if: ${{ needs.iOS.result == 'success' }}
        run: |
          content_ios="$(cat ./ios/ios_paths.json)"
          content_ios="${content_ios//'%'/'%25'}"
          content_ios="${content_ios//$'\n'/'%0A'}"
          content_ios="${content_ios//$'\r'/'%0D'}"
          ios_path=$(echo "$content_ios" | jq -r '.html_path')
          echo "ios_path=$ios_path" >> "$GITHUB_OUTPUT"

      - name: Publish links to apps for download
        uses: ./.github/actions/javascript/postTestBuildComment
        with:
          PR_NUMBER: ${{ env.PULL_REQUEST_NUMBER }}
          GITHUB_TOKEN: ${{ github.token }}
          ANDROID: ${{ needs.android.result }}
          IOS: ${{ needs.iOS.result }}
          ANDROID_LINK: ${{steps.get_android_path.outputs.android_path}}
          IOS_LINK: ${{steps.get_ios_path.outputs.ios_path}}

      - name: Announce failed workflow in Discord
        if: ${{ failure() }}
        uses: ./.github/actions/composite/announceFailedWorkflowInDiscord
        with:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
